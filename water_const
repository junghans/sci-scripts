#! /usr/bin/perl -w
#
# (C) 2006-2008 Chr. Junghans
# junghans@mpip-mainz.mpg.de
#
#version 0.1, 03.09.08 -- intial

use strict;

$_=$0;
s#^.*/##;
my $progname=$_;
my $usage="Usage: $progname [OPTIONS] ATOM CONST \nHelp with --help\n";

my $model="tip3p_matej";
my $SI="yes";
my $format="%e [%s]\n";
my $mixing="C";

my $kalorie=4.1868;
my $PI=3.14159265358979323846;

while ((defined ($ARGV[0])) and ($ARGV[0] =~ /^\-/))
{
   if (($ARGV[0] !~ /^--/) and (length($ARGV[0])>2)){
      $_=shift(@ARGV);
      if ( $_ =~ /^-[m]/ ) {
         unshift(@ARGV,substr($_,0,2),substr($_,2));
      }
      else{
         unshift(@ARGV,substr($_,0,2),"-".substr($_,2));
      }
   }
   if (($ARGV[0] eq "-h") or ($ARGV[0] eq "--help"))
   {
      print <<END;
$usage
Gvies back water model constant
-v, --version         Prints version
-h, --help            Show this help message
-m, --model NAME      Change water model
                      default: $model
                      possible: tip3p_matej
    --mixing [C|G]    change mixing rules Charm/Gromos
                      default: $mixing
    --non-SI          switch to kcal/mol and A
    --no-units        will show no units
                      (same as --format "%e\\n")
    --format STING    change format string
                      default "%e [%s]\\n"

CONST:                eps(e),sigma(s),mass(m),c6,c12,charge(q),length(l),angle(a)
ATOM:                 O, H, COM, or (OH,HH for mixing)

Send comments and bugs to: junghans\@mpip-mainz.mpg.de
END
      exit;
   }
   elsif (($ARGV[0] eq "-v") or ($ARGV[0] eq "--version"))
   {
      my $version=`perl -ne 'print "\$1\n" if /^#(version .*?) --/' $0 | perl -ne 'print if eof'`;
      chomp($version);
      print "$progname, $version  by C. Junghans\n";
      exit;
   }
   elsif (($ARGV[0] eq "-m") or ($ARGV[0] eq "--model"))
   {
      shift(@ARGV);
      $model=shift(@ARGV);
   }
   elsif ($ARGV[0] eq "--non-SI")
   {
      shift(@ARGV);
      $SI="no";
   }
   elsif ($ARGV[0] eq "--no-units")
   {
      shift(@ARGV);
      $format="%e\n";
   }
   elsif ($ARGV[0] eq "--mixing")
   {
      shift(@ARGV);
      $mixing=shift(@ARGV);
   }
   elsif ($ARGV[0] eq "--format")
   {
      shift(@ARGV);
      $format=shift(@ARGV);
   }
   else
   {
      die "Unknow option '".$ARGV[0]."' !\n";
   }
}

my %mass;
my %sigma;
my %eps;
my %q;
my %l;
my %c6;
my %c12;
my %angle;

$mass{O}=15.99940;
$mass{H}=1.008;

if ("$model" eq "tip3p_matej"){
   $eps{O}=0.6367;
   $eps{H}=0.19251;
   $sigma{O}=0.31507;
   $sigma{H}=0.04;
   $q{O}=-0.834;
   $q{H}=0.417;
   $l{OH}=0.09572;
   $angle{O}=104.52;
} elsif ("$model" eq "tip3p"){
   $eps{O}=0.6364;
   $eps{H}=0;
   $sigma{O}=0.315061;
   $sigma{H}=0.0;
   $q{O}=-0.834;
   $q{H}=0.417;
   $l{OH}=0.09572;
   $angle{O}=104.52;
} else {
   die "Model \"$model\" unknown\n";
}

$c6{O}=4*$eps{O}*$sigma{O}**6;
$c6{H}=4*$eps{H}*$sigma{H}**6;
$c12{O}=4*$eps{O}*$sigma{O}**12;
$c12{H}=4*$eps{H}*$sigma{H}**12;

#mixing
if ("$mixing" eq "C"){
   $eps{OH}=0.5*($eps{O}+$eps{H});
   $sigma{OH}=sqrt($sigma{O}*$sigma{H});
   $c6{OH}=4*$eps{OH}*$sigma{OH}**6;
   $c12{OH}=4*$eps{OH}*$sigma{OH}**12;
} elsif ("$mixing" eq "G"){
   $c6{OH}=sqrt($c6{O}*$c6{H});
   $c12{OH}=sqrt($c12{O}*$c12{H});
   $sigma{OH}=($c12{OH}/$c6{OH})**(1.0/6.0) if ($c6{OH}!=0.0);
   $eps{OH}=$c6{OH}/4.0/$sigma{OH}**6 if (($sigma{OH})and($sigma{OH}!=0.0));
} else {
   die "Unknow mixing rules\n";
}

$q{COM}=$q{O}+2*$q{H};
$mass{COM}=$mass{O}+2*$mass{H};
$l{HH}=2*$l{OH}*sin($angle{O}/2.0*$PI/180);
$angle{H}=(180-$angle{O})/2.0;

die "Need at least 2 arguments.\n$usage" if ($#ARGV<1);

my $atom=shift(@ARGV);
if ($atom !~ /^(H|O|COM|OH|HH)$/){
   die "Unknow atom type\n";
}

my $value;
my $unit;
my $scale=1;
if (($ARGV[0] eq "m") or ($ARGV[0] eq "mass"))
{
   $unit="u";
   $value=$mass{$atom};
}
elsif (($ARGV[0] eq "s") or ($ARGV[0] eq "sigma"))
{
   if ("$SI" eq "yes"){
      $unit="nm"
   } else {
      $unit="A";
      $scale=0.1;
   }
   $value=$sigma{$atom};
}
elsif (($ARGV[0] eq "l") or ($ARGV[0] eq "length"))
{
   if ("$SI" eq "yes"){
      $unit="nm"
   } else {
      $unit="A";
      $scale=0.1;
   }
   $value=$l{$atom};
}
elsif (($ARGV[0] eq "e") or ($ARGV[0] eq "eps"))
{
   if ("$SI" eq "yes"){
      $unit="kJ/mol"
   } else {
      $unit="kcal/mol";
      $scale=1/$kalorie;
   }
   $value=$eps{$atom};
}
elsif (($ARGV[0] eq "q") or ($ARGV[0] eq "charge"))
{
   $unit="e_0";
   $value=$q{$atom};
}
elsif (($ARGV[0] eq "a") or ($ARGV[0] eq "angle"))
{
   $unit="deg";
   $value=$angle{$atom};
}
elsif ($ARGV[0] eq "c6")
{
   if ("$SI" eq "yes"){
      $unit="nm**6 kJ/mol";
   } else {
      $unit="A**6 kcal/mol";
      $scale=1/$kalorie*0.1**6;
   }
   $value=$c6{$atom};
}
elsif ($ARGV[0] eq "c12")
{
   if ("$SI" eq "yes"){
      $unit="nm**12 kJ/mol";
   } else {
      $unit="A**12 kcal/mol";
      $scale=1/$kalorie*0.1**12;
   }
   $value=$c12{$atom};
}
else{
   die "Unknow constant\n";
}
if ($value) {
   printf $format,$value*$scale,$unit;
} else {
   print "Undefined\n";
}
